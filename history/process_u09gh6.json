[{
  "history_id" : "lmmnfknr64m",
  "history_input" : "import sys\nfrom utils import *\nimport warnings\nimport matplotlib.pyplot as plt\n\n\nshort_name = 'MODIS_T-JPL-L2P-v2019.0'\ns3_url = 's3://podaac-ops-cumulus-protected/MODIS_T-JPL-L2P-v2019.0/20210820033500-JPL-L2P_GHRSST-SSTskin-MODIS_T-N-v02.0-fv01.0.nc'\n\nhome_dir = os.path.expanduser(\"~\")\nplot_file_name = os.path.join(home_dir, \"harmony_plot_1.png\")\n\nif os.path.isfile(plot_file_name):\n  os.remove(plot_file_name)\n\ntry:\n  harmony_client = Client()\n  request = Request(\n    collection=Collection(id=short_name),\n    spatial=BBox(-97.77667, 21.20806, -83.05197, 30.16605),\n    temporal={\n      'start': dt.datetime(2021, 8, 20),\n      'stop': dt.datetime(2021, 8, 21),\n    },\n  )\n  job_id = harmony_client.submit(request)\n  harmony_client.wait_for_processing(job_id, show_progress=False)\n  data = harmony_client.result_json(job_id)\n  results = harmony_client.result_urls(job_id, link_type=LinkType.s3)\n  urls = list(results)\n  filename = '20210820033500-JPL-L2P_GHRSST-SSTskin-MODIS_T-N-v02.0-fv01.0_subsetted.nc4'\n\n  url = [url for url in urls if filename in url][0]\n  creds = harmony_client.aws_credentials()\n  s3_fs = s3fs.S3FileSystem(\n    key=creds['aws_access_key_id'],\n    secret=creds['aws_secret_access_key'],\n    token=creds['aws_session_token'],\n    client_kwargs={'region_name': 'us-west-2'},\n  )\n\n  f = s3_fs.open(url, mode='rb')\n  ds = xr.open_dataset(f)\n  ds.sea_surface_temperature.plot()\n  plt.savefig(plot_file_name)\nexcept Exception as e:\n  print(e)",
  "history_output" : "Exception ignored in: <function CachingFileManager.__del__ at 0x7f0c63a60a60>\nTraceback (most recent call last):\n  File \"/srv/conda/envs/notebook/lib/python3.9/site-packages/xarray/backends/file_manager.py\", line 249, in __del__\n  File \"/srv/conda/envs/notebook/lib/python3.9/site-packages/xarray/backends/file_manager.py\", line 233, in close\n  File \"/srv/conda/envs/notebook/lib/python3.9/site-packages/h5netcdf/core.py\", line 1209, in close\n  File \"/srv/conda/envs/notebook/lib/python3.9/site-packages/h5py/_hl/files.py\", line 585, in close\nTypeError: bad operand type for unary ~: 'NoneType'\nException ignored in: <function File.close at 0x7f0c5921d9d0>\nTraceback (most recent call last):\n  File \"/srv/conda/envs/notebook/lib/python3.9/site-packages/h5netcdf/core.py\", line 1209, in close\n  File \"/srv/conda/envs/notebook/lib/python3.9/site-packages/h5py/_hl/files.py\", line 585, in close\nTypeError: bad operand type for unary ~: 'NoneType'\n",
  "history_begin_time" : 1686608801277,
  "history_end_time" : 1686608843327,
  "history_notes" : null,
  "history_process" : "u09gh6",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "epehdr1qhv2",
  "history_input" : "import sys\nfrom utils import *\nimport warnings\nimport matplotlib.pyplot as plt\n\n\nshort_name = 'MODIS_T-JPL-L2P-v2019.0'\ns3_url = 's3://podaac-ops-cumulus-protected/MODIS_T-JPL-L2P-v2019.0/20210820033500-JPL-L2P_GHRSST-SSTskin-MODIS_T-N-v02.0-fv01.0.nc'\n\nhome_dir = os.path.expanduser(\"~\")\nplot_file_name = os.path.join(home_dir, \"harmony_plot_1.png\")\n\nif os.path.isfile(plot_file_name):\n  os.remove(plot_file_name)\n\ntry:\n  harmony_client = Client()\n  request = Request(\n    collection=Collection(id=short_name),\n    spatial=BBox(-97.77667, 21.20806, -83.05197, 30.16605),\n    temporal={\n      'start': dt.datetime(2021, 8, 20),\n      'stop': dt.datetime(2021, 8, 21),\n    },\n  )\n  job_id = harmony_client.submit(request)\n  harmony_client.wait_for_processing(job_id, show_progress=False)\n  data = harmony_client.result_json(job_id)\n  results = harmony_client.result_urls(job_id, link_type=LinkType.s3)\n  urls = list(results)\n  filename = '20210820033500-JPL-L2P_GHRSST-SSTskin-MODIS_T-N-v02.0-fv01.0_subsetted.nc4'\n\n  url = [url for url in urls if filename in url][0]\n  creds = harmony_client.aws_credentials()\n  s3_fs = s3fs.S3FileSystem(\n    key=creds['aws_access_key_id'],\n    secret=creds['aws_secret_access_key'],\n    token=creds['aws_session_token'],\n    client_kwargs={'region_name': 'us-west-2'},\n  )\n\n  f = s3_fs.open(url, mode='rb')\n  ds = xr.open_dataset(f)\n  ds.sea_surface_temperature.plot()\n  plt.savefig(plot_file_name)\nexcept Exception as e:\n  print(e)",
  "history_output" : "Exception ignored in: <function CachingFileManager.__del__ at 0x7f2dce35ba60>\nTraceback (most recent call last):\n  File \"/srv/conda/envs/notebook/lib/python3.9/site-packages/xarray/backends/file_manager.py\", line 249, in __del__\n  File \"/srv/conda/envs/notebook/lib/python3.9/site-packages/xarray/backends/file_manager.py\", line 233, in close\n  File \"/srv/conda/envs/notebook/lib/python3.9/site-packages/h5netcdf/core.py\", line 1209, in close\n  File \"/srv/conda/envs/notebook/lib/python3.9/site-packages/h5py/_hl/files.py\", line 585, in close\nTypeError: bad operand type for unary ~: 'NoneType'\nException ignored in: <function File.close at 0x7f2dbfb159d0>\nTraceback (most recent call last):\n  File \"/srv/conda/envs/notebook/lib/python3.9/site-packages/h5netcdf/core.py\", line 1209, in close\n  File \"/srv/conda/envs/notebook/lib/python3.9/site-packages/h5py/_hl/files.py\", line 585, in close\nTypeError: bad operand type for unary ~: 'NoneType'\n",
  "history_begin_time" : 1686608612034,
  "history_end_time" : 1686608643948,
  "history_notes" : null,
  "history_process" : "u09gh6",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "n0ema93pey0",
  "history_input" : "import sys\nfrom utils import *\nimport warnings\n\nshort_name = 'MODIS_T-JPL-L2P-v2019.0'\ns3_url = 's3://podaac-ops-cumulus-protected/MODIS_T-JPL-L2P-v2019.0/20210820033500-JPL-L2P_GHRSST-SSTskin-MODIS_T-N-v02.0-fv01.0.nc'\n\nhome_dir = os.path.expanduser(\"~\")\nplot_file_name = os.path.join(home_dir, \"harmony_plot_1.png\")\n\nif os.path.isfile(plot_file_name):\n  os.remove(plot_file_name)\n\ntry:\n  harmony_client = Client()\n  request = Request(\n    collection=Collection(id=short_name),\n    spatial=BBox(-97.77667, 21.20806, -83.05197, 30.16605),\n    temporal={\n      'start': dt.datetime(2021, 8, 20),\n      'stop': dt.datetime(2021, 8, 21),\n    },\n  )\n  job_id = harmony_client.submit(request)\n  harmony_client.wait_for_processing(job_id, show_progress=False)\n  data = harmony_client.result_json(job_id)\n  results = harmony_client.result_urls(job_id, link_type=LinkType.s3)\n  urls = list(results)\n  filename = '20210820033500-JPL-L2P_GHRSST-SSTskin-MODIS_T-N-v02.0-fv01.0_subsetted.nc4'\n\n  url = [url for url in urls if filename in url][0]\n  creds = harmony_client.aws_credentials()\n  s3_fs = s3fs.S3FileSystem(\n    key=creds['aws_access_key_id'],\n    secret=creds['aws_secret_access_key'],\n    token=creds['aws_session_token'],\n    client_kwargs={'region_name': 'us-west-2'},\n  )\n\n  f = s3_fs.open(url, mode='rb')\n  ds = xr.open_dataset(f)\n  ds.sea_surface_temperature.plot()\n  plt.savefig(plot_file_name)\nexcept Exception as e:\n  print(e)",
  "history_output" : "name 'plt' is not defined\nException ignored in: <function CachingFileManager.__del__ at 0x7f5af851ca60>\nTraceback (most recent call last):\n  File \"/srv/conda/envs/notebook/lib/python3.9/site-packages/xarray/backends/file_manager.py\", line 249, in __del__\n  File \"/srv/conda/envs/notebook/lib/python3.9/site-packages/xarray/backends/file_manager.py\", line 233, in close\n  File \"/srv/conda/envs/notebook/lib/python3.9/site-packages/h5netcdf/core.py\", line 1209, in close\n  File \"/srv/conda/envs/notebook/lib/python3.9/site-packages/h5py/_hl/files.py\", line 585, in close\nTypeError: bad operand type for unary ~: 'NoneType'\nException ignored in: <function File.close at 0x7f5ae63d79d0>\nTraceback (most recent call last):\n  File \"/srv/conda/envs/notebook/lib/python3.9/site-packages/h5netcdf/core.py\", line 1209, in close\n  File \"/srv/conda/envs/notebook/lib/python3.9/site-packages/h5py/_hl/files.py\", line 585, in close\nTypeError: bad operand type for unary ~: 'NoneType'\n",
  "history_begin_time" : 1686608491785,
  "history_end_time" : 1686608523505,
  "history_notes" : null,
  "history_process" : "u09gh6",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "739o9yp2mug",
  "history_input" : "import sys\nfrom utils import *\nimport warnings\n\nshort_name = 'MODIS_T-JPL-L2P-v2019.0'\ns3_url = 's3://podaac-ops-cumulus-protected/MODIS_T-JPL-L2P-v2019.0/20210820033500-JPL-L2P_GHRSST-SSTskin-MODIS_T-N-v02.0-fv01.0.nc'\n\nhome_dir = os.path.expanduser(\"~\")\nplot_file_name = os.path.join(home_dir, \"harmony_plot_1.png\")\n\nif os.path.isfile(plot_file_name):\n  os.remove(plot_file_name)\n\ntry:\n  harmony_client = Client()\n  request = Request(\n    collection=Collection(id=short_name),\n    spatial=BBox(-97.77667, 21.20806, -83.05197, 30.16605),\n    temporal={\n      'start': dt.datetime(2021, 8, 20),\n      'stop': dt.datetime(2021, 8, 21),\n    },\n  )\n  job_id = harmony_client.submit(request)\n  harmony_client.wait_for_processing(job_id, show_progress=False)\n  data = harmony_client.result_json(job_id)\n  results = harmony_client.result_urls(job_id, link_type=LinkType.s3)\n  urls = list(results)\n  filename = '20210820033500-JPL-L2P_GHRSST-SSTskin-MODIS_T-N-v02.0-fv01.0_subsetted.nc4'\n\n  url = [url for url in urls if filename in url][0]\n  creds = harmony_client.aws_credentials()\n  s3_fs = s3fs.S3FileSystem(\n    key=creds['aws_access_key_id'],\n    secret=creds['aws_secret_access_key'],\n    token=creds['aws_session_token'],\n    client_kwargs={'region_name': 'us-west-2'},\n  )\n\n  f = s3_fs.open(url, mode='rb')\n  ds = xr.open_dataset(f)\n  ds.sea_surface_temperature.plot()\n  plt.savefig(plot_file_name)\nexcept Exception as e:\n  print(e)",
  "history_output" : "name 'plt' is not defined\nException ignored in: <function CachingFileManager.__del__ at 0x7f48a6c49a60>\nTraceback (most recent call last):\n  File \"/srv/conda/envs/notebook/lib/python3.9/site-packages/xarray/backends/file_manager.py\", line 249, in __del__\n  File \"/srv/conda/envs/notebook/lib/python3.9/site-packages/xarray/backends/file_manager.py\", line 233, in close\n  File \"/srv/conda/envs/notebook/lib/python3.9/site-packages/h5netcdf/core.py\", line 1209, in close\n  File \"/srv/conda/envs/notebook/lib/python3.9/site-packages/h5py/_hl/files.py\", line 585, in close\nTypeError: bad operand type for unary ~: 'NoneType'\nException ignored in: <function File.close at 0x7f489cb08a60>\nTraceback (most recent call last):\n  File \"/srv/conda/envs/notebook/lib/python3.9/site-packages/h5netcdf/core.py\", line 1209, in close\n  File \"/srv/conda/envs/notebook/lib/python3.9/site-packages/h5py/_hl/files.py\", line 585, in close\nTypeError: bad operand type for unary ~: 'NoneType'\n",
  "history_begin_time" : 1686608403900,
  "history_end_time" : 1686608435281,
  "history_notes" : null,
  "history_process" : "u09gh6",
  "host_id" : "100001",
  "indicator" : "Done"
},{
  "history_id" : "eo4k56npqh3",
  "history_input" : "import sys\nfrom utils import *\nimport warnings\n\nshort_name = 'MODIS_T-JPL-L2P-v2019.0'\ns3_url = 's3://podaac-ops-cumulus-protected/MODIS_T-JPL-L2P-v2019.0/20210820033500-JPL-L2P_GHRSST-SSTskin-MODIS_T-N-v02.0-fv01.0.nc'\n\nhome_dir = os.path.expanduser(\"~\")\nplot_file_name = os.path.join(home_dir, \"harmony_plot_1.png\")\n\nif os.path.isfile(plot_file_name):\n  os.remove(plot_file_name)\n\nharmony_client = Client()\nrequest = Request(\n  collection=Collection(id=short_name),\n  spatial=BBox(-97.77667, 21.20806, -83.05197, 30.16605),\n  temporal={\n    'start': dt.datetime(2021, 8, 20),\n    'stop': dt.datetime(2021, 8, 21),\n  },\n)\njob_id = harmony_client.submit(request)\nharmony_client.wait_for_processing(job_id, show_progress=False)\ndata = harmony_client.result_json(job_id)\nresults = harmony_client.result_urls(job_id, link_type=LinkType.s3)\nurls = list(results)\nfilename = '20210820033500-JPL-L2P_GHRSST-SSTskin-MODIS_T-N-v02.0-fv01.0_subsetted.nc4'\n\nurl = [url for url in urls if filename in url][0]\ncreds = harmony_client.aws_credentials()\ns3_fs = s3fs.S3FileSystem(\n  key=creds['aws_access_key_id'],\n  secret=creds['aws_secret_access_key'],\n  token=creds['aws_session_token'],\n  client_kwargs={'region_name': 'us-west-2'},\n)\n\n\nf = s3_fs.open(url, mode='rb')\nds = xr.open_dataset(f)\nds.sea_surface_temperature.plot()\nplt.savefig(plot_file_name)\n",
  "history_output" : "Traceback (most recent call last):\n  File \"/home/jovyan/gw-workspace/eo4k56npqh3/harmony_connect_process.py\", line 43, in <module>\n    plt.savefig(plot_file_name)\nNameError: name 'plt' is not defined\nException ignored in: <function CachingFileManager.__del__ at 0x7fba874c4a60>\nTraceback (most recent call last):\n  File \"/srv/conda/envs/notebook/lib/python3.9/site-packages/xarray/backends/file_manager.py\", line 249, in __del__\n  File \"/srv/conda/envs/notebook/lib/python3.9/site-packages/xarray/backends/file_manager.py\", line 233, in close\n  File \"/srv/conda/envs/notebook/lib/python3.9/site-packages/h5netcdf/core.py\", line 1209, in close\n  File \"/srv/conda/envs/notebook/lib/python3.9/site-packages/h5py/_hl/files.py\", line 585, in close\nTypeError: bad operand type for unary ~: 'NoneType'\nException ignored in: <function File.close at 0x7fba7d37e9d0>\nTraceback (most recent call last):\n  File \"/srv/conda/envs/notebook/lib/python3.9/site-packages/h5netcdf/core.py\", line 1209, in close\n  File \"/srv/conda/envs/notebook/lib/python3.9/site-packages/h5py/_hl/files.py\", line 585, in close\nTypeError: bad operand type for unary ~: 'NoneType'\n",
  "history_begin_time" : 1686608297355,
  "history_end_time" : 1686608329405,
  "history_notes" : null,
  "history_process" : "u09gh6",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "o7QxnosyAjpE",
  "history_input" : "import sys\nfrom utils import *\nimport warnings\n\nshort_name = 'MODIS_T-JPL-L2P-v2019.0'\ns3_url = 's3://podaac-ops-cumulus-protected/MODIS_T-JPL-L2P-v2019.0/20210820033500-JPL-L2P_GHRSST-SSTskin-MODIS_T-N-v02.0-fv01.0.nc'\n\nhome_dir = os.path.expanduser(\"~\")\nplot_file_name = os.path.join(home_dir, \"harmony_plot_1.png\")\n\nif os.path.isfile(plot_file_name):\n  os.remove(plot_file_name)\n\nharmony_client = Client()\nrequest = Request(\n  collection=Collection(id=short_name),\n  spatial=BBox(-97.77667, 21.20806, -83.05197, 30.16605),\n  temporal={\n    'start': dt.datetime(2021, 8, 20),\n    'stop': dt.datetime(2021, 8, 21),\n  },\n)\njob_id = harmony_client.submit(request)\nharmony_client.wait_for_processing(job_id, show_progress=False)\ndata = harmony_client.result_json(job_id)\nresults = harmony_client.result_urls(job_id, link_type=LinkType.s3)\nurls = list(results)\nfilename = '20210820033500-JPL-L2P_GHRSST-SSTskin-MODIS_T-N-v02.0-fv01.0_subsetted.nc4'\n\nurl = [url for url in urls if filename in url][0]\ncreds = harmony_client.aws_credentials()\ns3_fs = s3fs.S3FileSystem(\n  key=creds['aws_access_key_id'],\n  secret=creds['aws_secret_access_key'],\n  token=creds['aws_session_token'],\n  client_kwargs={'region_name': 'us-west-2'},\n)\n\n\nf = s3_fs.open(url, mode='rb')\nds = xr.open_dataset(f)\nds.sea_surface_temperature.plot()\n",
  "history_output" : "Exception ignored in: <function CachingFileManager.__del__ at 0x7fc8731e6a60>\nTraceback (most recent call last):\n  File \"/srv/conda/envs/notebook/lib/python3.9/site-packages/xarray/backends/file_manager.py\", line 249, in __del__\n  File \"/srv/conda/envs/notebook/lib/python3.9/site-packages/xarray/backends/file_manager.py\", line 233, in close\n  File \"/srv/conda/envs/notebook/lib/python3.9/site-packages/h5netcdf/core.py\", line 1209, in close\n  File \"/srv/conda/envs/notebook/lib/python3.9/site-packages/h5py/_hl/files.py\", line 585, in close\nTypeError: bad operand type for unary ~: 'NoneType'\nException ignored in: <function File.close at 0x7fc8690a79d0>\nTraceback (most recent call last):\n  File \"/srv/conda/envs/notebook/lib/python3.9/site-packages/h5netcdf/core.py\", line 1209, in close\n  File \"/srv/conda/envs/notebook/lib/python3.9/site-packages/h5py/_hl/files.py\", line 585, in close\nTypeError: bad operand type for unary ~: 'NoneType'\n",
  "history_begin_time" : 1686608180361,
  "history_end_time" : 1686608213482,
  "history_notes" : null,
  "history_process" : "u09gh6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "hJVRDPyVp4tl",
  "history_input" : "import sys\nfrom utils import *\nimport warnings\n\nshort_name = 'MODIS_T-JPL-L2P-v2019.0'\ns3_url = 's3://podaac-ops-cumulus-protected/MODIS_T-JPL-L2P-v2019.0/20210820033500-JPL-L2P_GHRSST-SSTskin-MODIS_T-N-v02.0-fv01.0.nc'\n\nhome_dir = os.path.expanduser(\"~\")\nplot_file_name = os.path.join(home_dir, \"harmony_plot_1.png\")\n\nif os.path.isfile(plot_file_name):\n  os.remove(plot_file_name)\n\nharmony_client = Client()\nrequest = Request(\n  collection=Collection(id=short_name),\n  spatial=BBox(-97.77667, 21.20806, -83.05197, 30.16605),\n  temporal={\n    'start': dt.datetime(2021, 8, 20),\n    'stop': dt.datetime(2021, 8, 21),\n  },\n)\njob_id = harmony_client.submit(request)\nharmony_client.wait_for_processing(job_id, show_progress=False)\ndata = harmony_client.result_json(job_id)\nresults = harmony_client.result_urls(job_id, link_type=LinkType.s3)\nurls = list(results)\nfilename = '20210820033500-JPL-L2P_GHRSST-SSTskin-MODIS_T-N-v02.0-fv01.0_subsetted.nc4'\n\nurl = [url for url in urls if filename in url][0]\ncreds = harmony_client.aws_credentials()\ns3_fs = s3fs.S3FileSystem(\n  key=creds['aws_access_key_id'],\n  secret=creds['aws_secret_access_key'],\n  token=creds['aws_session_token'],\n  client_kwargs={'region_name': 'us-west-2'},\n)\n\n\nwith s3_fs.open(url, mode='rb') as f:\n  ds = nc.Dataset('temporary_file.nc', memory=f.read(), diskless=True)\n  sst_variable = ds.variables['sea_surface_temperature']\n  sst_data = sst_variable[:]\n\n  # Plot the data\n  for i in range(sst_data.shape[0]):\n    plt.plot(sst_data[i])\n    plt.savefig(plot_file_name)\n",
  "history_output" : "Traceback (most recent call last):\n  File \"/home/jovyan/gw-workspace/hJVRDPyVp4tl/harmony_connect_process.py\", line 41, in <module>\n    ds = nc.Dataset('temporary_file.nc', memory=f.read(), diskless=True)\nNameError: name 'nc' is not defined\n",
  "history_begin_time" : 1686608039714,
  "history_end_time" : 1686608082589,
  "history_notes" : null,
  "history_process" : "u09gh6",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "Iet4nkCcuSfY",
  "history_input" : "import sys\nfrom utils import *\nimport warnings\n\nshort_name = 'MODIS_T-JPL-L2P-v2019.0'\ns3_url = 's3://podaac-ops-cumulus-protected/MODIS_T-JPL-L2P-v2019.0/20210820033500-JPL-L2P_GHRSST-SSTskin-MODIS_T-N-v02.0-fv01.0.nc'\n\nhome_dir = os.path.expanduser(\"~\")\nplot_file_name = os.path.join(home_dir, \"harmony_plot_1.png\")\n\nif os.path.isfile(plot_file_name):\n  os.remove(plot_file_name)\n\nharmony_client = Client()\nrequest = Request(\n  collection=Collection(id=short_name),\n  spatial=BBox(-97.77667, 21.20806, -83.05197, 30.16605),\n  temporal={\n    'start': dt.datetime(2021, 8, 20),\n    'stop': dt.datetime(2021, 8, 21),\n  },\n)\n#job_id = harmony_client.submit(request)\n#harmony_client.wait_for_processing(job_id, show_progress=False)\n#data = harmony_client.result_json(job_id)\n#results = harmony_client.result_urls(job_id, link_type=LinkType.s3)\n#urls = list(results)\n#filename = '20210820033500-JPL-L2P_GHRSST-SSTskin-MODIS_T-N-v02.0-fv01.0_subsetted.nc4'\n\n#url = [url for url in urls if filename in url][0]\n#creds = harmony_client.aws_credentials()\n#s3_fs = s3fs.S3FileSystem(\n#  key=creds['aws_access_key_id'],\n#  secret=creds['aws_secret_access_key'],\n#  token=creds['aws_session_token'],\n#  client_kwargs={'region_name': 'us-west-2'},\n#)\n\n\n#with s3_fs.open(url, mode='rb') as f:\n#  ds = nc.Dataset('temporary_file.nc', memory=f.read(), diskless=True)\n#  sst_variable = ds.variables['sea_surface_temperature']\n#  sst_data = sst_variable[:]\n\n  # Plot the data\n#  for i in range(sst_data.shape[0]):\n#    plt.plot(sst_data[i])\n#    plt.savefig(plot_file_name)\n",
  "history_output" : "",
  "history_begin_time" : 1686608005111,
  "history_end_time" : 1686608010805,
  "history_notes" : null,
  "history_process" : "u09gh6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "JZVHAZAYRGSq",
  "history_input" : "import sys\nfrom utils import *\nimport warnings\n\nhome_dir = os.path.expanduser(\"~\")\nplot_file_name = os.path.join(home_dir, \"harmony_plot_1.png\")\n\nif os.path.isfile(plot_file_name):\n  os.remove(plot_file_name)\n\nharmony_client = Client()\nrequest = Request(\n  collection=Collection(id=short_name),\n  spatial=BBox(-97.77667, 21.20806, -83.05197, 30.16605),\n  temporal={\n    'start': dt.datetime(2021, 8, 20),\n    'stop': dt.datetime(2021, 8, 21),\n  },\n)\n#job_id = harmony_client.submit(request)\n#harmony_client.wait_for_processing(job_id, show_progress=False)\n#data = harmony_client.result_json(job_id)\n#results = harmony_client.result_urls(job_id, link_type=LinkType.s3)\n#urls = list(results)\n#filename = '20210820033500-JPL-L2P_GHRSST-SSTskin-MODIS_T-N-v02.0-fv01.0_subsetted.nc4'\n\n#url = [url for url in urls if filename in url][0]\n#creds = harmony_client.aws_credentials()\n#s3_fs = s3fs.S3FileSystem(\n#  key=creds['aws_access_key_id'],\n#  secret=creds['aws_secret_access_key'],\n#  token=creds['aws_session_token'],\n#  client_kwargs={'region_name': 'us-west-2'},\n#)\n\n\n#with s3_fs.open(url, mode='rb') as f:\n#  ds = nc.Dataset('temporary_file.nc', memory=f.read(), diskless=True)\n#  sst_variable = ds.variables['sea_surface_temperature']\n#  sst_data = sst_variable[:]\n\n  # Plot the data\n#  for i in range(sst_data.shape[0]):\n#    plt.plot(sst_data[i])\n#    plt.savefig(plot_file_name)\n",
  "history_output" : "Traceback (most recent call last):\n  File \"/home/jovyan/gw-workspace/JZVHAZAYRGSq/harmony_connect_process.py\", line 13, in <module>\n    collection=Collection(id=short_name),\nNameError: name 'short_name' is not defined\n",
  "history_begin_time" : 1686607976645,
  "history_end_time" : 1686607982312,
  "history_notes" : null,
  "history_process" : "u09gh6",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "Li0MtJ4U6Mzk",
  "history_input" : "import sys\nfrom utils import *\nimport warnings\n\nhome_dir = os.path.expanduser(\"~\")\nplot_file_name = os.path.join(home_dir, \"harmony_plot_1.png\")\n\nif os.path.isfile(plot_file_name):\n  os.remove(plot_file_name)\n\n#harmony_client = Client()\n#request = Request(\n#  collection=Collection(id=short_name),\n#  spatial=BBox(-97.77667, 21.20806, -83.05197, 30.16605),\n#  temporal={\n#    'start': dt.datetime(2021, 8, 20),\n#    'stop': dt.datetime(2021, 8, 21),\n#  },\n#)\n#job_id = harmony_client.submit(request)\n#harmony_client.wait_for_processing(job_id, show_progress=False)\n#data = harmony_client.result_json(job_id)\n#results = harmony_client.result_urls(job_id, link_type=LinkType.s3)\n#urls = list(results)\n#filename = '20210820033500-JPL-L2P_GHRSST-SSTskin-MODIS_T-N-v02.0-fv01.0_subsetted.nc4'\n\n#url = [url for url in urls if filename in url][0]\n#creds = harmony_client.aws_credentials()\n#s3_fs = s3fs.S3FileSystem(\n#  key=creds['aws_access_key_id'],\n#  secret=creds['aws_secret_access_key'],\n#  token=creds['aws_session_token'],\n#  client_kwargs={'region_name': 'us-west-2'},\n#)\n\n\n#with s3_fs.open(url, mode='rb') as f:\n#  ds = nc.Dataset('temporary_file.nc', memory=f.read(), diskless=True)\n#  sst_variable = ds.variables['sea_surface_temperature']\n#  sst_data = sst_variable[:]\n\n  # Plot the data\n#  for i in range(sst_data.shape[0]):\n#    plt.plot(sst_data[i])\n#    plt.savefig(plot_file_name)\n",
  "history_output" : "",
  "history_begin_time" : 1686607959556,
  "history_end_time" : 1686607962498,
  "history_notes" : null,
  "history_process" : "u09gh6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "zmB8FBJ3WnFI",
  "history_input" : "import sys\nfrom podaac_s3 import *\nimport warnings\n\nhome_dir = os.path.expanduser(\"~\")\nplot_file_name = os.path.join(home_dir, \"harmony_plot_1.png\")\n\nif os.path.isfile(plot_file_name):\n  os.remove(plot_file_name)\n\n#harmony_client = Client()\n#request = Request(\n#  collection=Collection(id=short_name),\n#  spatial=BBox(-97.77667, 21.20806, -83.05197, 30.16605),\n#  temporal={\n#    'start': dt.datetime(2021, 8, 20),\n#    'stop': dt.datetime(2021, 8, 21),\n#  },\n#)\n#job_id = harmony_client.submit(request)\n#harmony_client.wait_for_processing(job_id, show_progress=False)\n#data = harmony_client.result_json(job_id)\n#results = harmony_client.result_urls(job_id, link_type=LinkType.s3)\n#urls = list(results)\n#filename = '20210820033500-JPL-L2P_GHRSST-SSTskin-MODIS_T-N-v02.0-fv01.0_subsetted.nc4'\n\n#url = [url for url in urls if filename in url][0]\n#creds = harmony_client.aws_credentials()\n#s3_fs = s3fs.S3FileSystem(\n#  key=creds['aws_access_key_id'],\n#  secret=creds['aws_secret_access_key'],\n#  token=creds['aws_session_token'],\n#  client_kwargs={'region_name': 'us-west-2'},\n#)\n\n\n#with s3_fs.open(url, mode='rb') as f:\n#  ds = nc.Dataset('temporary_file.nc', memory=f.read(), diskless=True)\n#  sst_variable = ds.variables['sea_surface_temperature']\n#  sst_data = sst_variable[:]\n\n  # Plot the data\n#  for i in range(sst_data.shape[0]):\n#    plt.plot(sst_data[i])\n#    plt.savefig(plot_file_name)\n",
  "history_output" : "",
  "history_begin_time" : 1686607933206,
  "history_end_time" : 1686607947038,
  "history_notes" : null,
  "history_process" : "u09gh6",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "iyqEnGDVhvmt",
  "history_input" : "import sys\nfrom podaac_s3 import *\nimport warnings\n\nhome_dir = os.path.expanduser(\"~\")\nplot_file_name = os.path.join(home_dir, \"harmony_plot_1.png\")\n\nif os.path.isfile(plot_file_name):\n  os.remove(plot_file_name)\n\nharmony_client = Client()\n#request = Request(\n#  collection=Collection(id=short_name),\n#  spatial=BBox(-97.77667, 21.20806, -83.05197, 30.16605),\n#  temporal={\n#    'start': dt.datetime(2021, 8, 20),\n#    'stop': dt.datetime(2021, 8, 21),\n#  },\n#)\n#job_id = harmony_client.submit(request)\n#harmony_client.wait_for_processing(job_id, show_progress=False)\n#data = harmony_client.result_json(job_id)\n#results = harmony_client.result_urls(job_id, link_type=LinkType.s3)\n#urls = list(results)\n#filename = '20210820033500-JPL-L2P_GHRSST-SSTskin-MODIS_T-N-v02.0-fv01.0_subsetted.nc4'\n\n#url = [url for url in urls if filename in url][0]\n#creds = harmony_client.aws_credentials()\n#s3_fs = s3fs.S3FileSystem(\n#  key=creds['aws_access_key_id'],\n#  secret=creds['aws_secret_access_key'],\n#  token=creds['aws_session_token'],\n#  client_kwargs={'region_name': 'us-west-2'},\n#)\n\n\n#with s3_fs.open(url, mode='rb') as f:\n#  ds = nc.Dataset('temporary_file.nc', memory=f.read(), diskless=True)\n#  sst_variable = ds.variables['sea_surface_temperature']\n#  sst_data = sst_variable[:]\n\n  # Plot the data\n#  for i in range(sst_data.shape[0]):\n#    plt.plot(sst_data[i])\n#    plt.savefig(plot_file_name)\n",
  "history_output" : "",
  "history_begin_time" : 1686607905108,
  "history_end_time" : 1686607922257,
  "history_notes" : null,
  "history_process" : "u09gh6",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "fflx3hf2zn8",
  "history_input" : "import sys\nfrom podaac_s3 import *\nimport warnings\n\nhome_dir = os.path.expanduser(\"~\")\nplot_file_name = os.path.join(home_dir, \"harmony_plot_1.png\")\n\nif os.path.isfile(plot_file_name):\n  os.remove(plot_file_name)\n\nharmony_client = Client()\nrequest = Request(\n  collection=Collection(id=short_name),\n  spatial=BBox(-97.77667, 21.20806, -83.05197, 30.16605),\n  temporal={\n    'start': dt.datetime(2021, 8, 20),\n    'stop': dt.datetime(2021, 8, 21),\n  },\n)\n#job_id = harmony_client.submit(request)\n#harmony_client.wait_for_processing(job_id, show_progress=False)\n#data = harmony_client.result_json(job_id)\n#results = harmony_client.result_urls(job_id, link_type=LinkType.s3)\n#urls = list(results)\n#filename = '20210820033500-JPL-L2P_GHRSST-SSTskin-MODIS_T-N-v02.0-fv01.0_subsetted.nc4'\n\n#url = [url for url in urls if filename in url][0]\n#creds = harmony_client.aws_credentials()\n#s3_fs = s3fs.S3FileSystem(\n#  key=creds['aws_access_key_id'],\n#  secret=creds['aws_secret_access_key'],\n#  token=creds['aws_session_token'],\n#  client_kwargs={'region_name': 'us-west-2'},\n#)\n\n\n#with s3_fs.open(url, mode='rb') as f:\n#  ds = nc.Dataset('temporary_file.nc', memory=f.read(), diskless=True)\n#  sst_variable = ds.variables['sea_surface_temperature']\n#  sst_data = sst_variable[:]\n\n  # Plot the data\n#  for i in range(sst_data.shape[0]):\n#    plt.plot(sst_data[i])\n#    plt.savefig(plot_file_name)\n",
  "history_output" : "",
  "history_begin_time" : 1686607865304,
  "history_end_time" : 1686607881956,
  "history_notes" : null,
  "history_process" : "u09gh6",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "gYey146XSND2",
  "history_input" : "",
  "history_output" : "",
  "history_begin_time" : 1686607796144,
  "history_end_time" : 1686607796186,
  "history_notes" : null,
  "history_process" : "u09gh6",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "w7ozk8dsfgu",
  "history_input" : "import sys\nfrom podaac_s3 import *\nimport warnings\n\nhome_dir = os.path.expanduser(\"~\")\nplot_file_name = os.path.join(home_dir, \"harmony_plot_1.png\")\n\nif os.path.isfile(plot_file_name):\n  os.remove(plot_file_name)\n\nharmony_client = Client()\nrequest = Request(\n  collection=Collection(id=short_name),\n  spatial=BBox(-97.77667, 21.20806, -83.05197, 30.16605),\n  temporal={\n    'start': dt.datetime(2021, 8, 20),\n    'stop': dt.datetime(2021, 8, 21),\n  },\n)\n#job_id = harmony_client.submit(request)\n#harmony_client.wait_for_processing(job_id, show_progress=False)\n#data = harmony_client.result_json(job_id)\n#results = harmony_client.result_urls(job_id, link_type=LinkType.s3)\n#urls = list(results)\n#filename = '20210820033500-JPL-L2P_GHRSST-SSTskin-MODIS_T-N-v02.0-fv01.0_subsetted.nc4'\n\n#url = [url for url in urls if filename in url][0]\n#creds = harmony_client.aws_credentials()\n#s3_fs = s3fs.S3FileSystem(\n#  key=creds['aws_access_key_id'],\n#  secret=creds['aws_secret_access_key'],\n#  token=creds['aws_session_token'],\n#  client_kwargs={'region_name': 'us-west-2'},\n#)\n\n\n#with s3_fs.open(url, mode='rb') as f:\n#  ds = nc.Dataset('temporary_file.nc', memory=f.read(), diskless=True)\n#  sst_variable = ds.variables['sea_surface_temperature']\n#  sst_data = sst_variable[:]\n\n  # Plot the data\n#  for i in range(sst_data.shape[0]):\n#    plt.plot(sst_data[i])\n#    plt.savefig(plot_file_name)\n",
  "history_output" : "comes till here\n",
  "history_begin_time" : 1686607752302,
  "history_end_time" : 1686607767761,
  "history_notes" : null,
  "history_process" : "u09gh6",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "hSTCmiZmXTEY",
  "history_input" : "import sys\nfrom podaac_s3 import *\nimport warnings\n\nhome_dir = os.path.expanduser(\"~\")\nplot_file_name = os.path.join(home_dir, \"harmony_plot_1.png\")\n\nif os.path.isfile(plot_file_name):\n  os.remove(plot_file_name)\n\nharmony_client = Client()\nrequest = Request(\n  collection=Collection(id=short_name),\n  spatial=BBox(-97.77667, 21.20806, -83.05197, 30.16605),\n  temporal={\n    'start': dt.datetime(2021, 8, 20),\n    'stop': dt.datetime(2021, 8, 21),\n  },\n)\n#job_id = harmony_client.submit(request)\n#harmony_client.wait_for_processing(job_id, show_progress=False)\n#data = harmony_client.result_json(job_id)\n#results = harmony_client.result_urls(job_id, link_type=LinkType.s3)\n#urls = list(results)\n#filename = '20210820033500-JPL-L2P_GHRSST-SSTskin-MODIS_T-N-v02.0-fv01.0_subsetted.nc4'\n\n#url = [url for url in urls if filename in url][0]\n#creds = harmony_client.aws_credentials()\n#s3_fs = s3fs.S3FileSystem(\n#  key=creds['aws_access_key_id'],\n#  secret=creds['aws_secret_access_key'],\n#  token=creds['aws_session_token'],\n#  client_kwargs={'region_name': 'us-west-2'},\n#)\n\n\n#with s3_fs.open(url, mode='rb') as f:\n#  ds = nc.Dataset('temporary_file.nc', memory=f.read(), diskless=True)\n#  sst_variable = ds.variables['sea_surface_temperature']\n#  sst_data = sst_variable[:]\n\n  # Plot the data\n#  for i in range(sst_data.shape[0]):\n#    plt.plot(sst_data[i])\n#    plt.savefig(plot_file_name)\n",
  "history_output" : "comes till here\n",
  "history_begin_time" : 1686607654429,
  "history_end_time" : 1686607674544,
  "history_notes" : null,
  "history_process" : "u09gh6",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "Lzs3azgDap4E",
  "history_input" : "import sys\nfrom podaac_s3 import *\nimport warnings\n\nhome_dir = os.path.expanduser(\"~\")\nplot_file_name = os.path.join(home_dir, \"harmony_plot_1.png\")\n\nif os.path.isfile(plot_file_name):\n  os.remove(plot_file_name)\n\nharmony_client = Client()\nrequest = Request(\n  collection=Collection(id=short_name),\n  spatial=BBox(-97.77667, 21.20806, -83.05197, 30.16605),\n  temporal={\n    'start': dt.datetime(2021, 8, 20),\n    'stop': dt.datetime(2021, 8, 21),\n  },\n)\n#job_id = harmony_client.submit(request)\n#harmony_client.wait_for_processing(job_id, show_progress=False)\n#data = harmony_client.result_json(job_id)\n#results = harmony_client.result_urls(job_id, link_type=LinkType.s3)\n#urls = list(results)\n#filename = '20210820033500-JPL-L2P_GHRSST-SSTskin-MODIS_T-N-v02.0-fv01.0_subsetted.nc4'\n\n#url = [url for url in urls if filename in url][0]\n#creds = harmony_client.aws_credentials()\n#s3_fs = s3fs.S3FileSystem(\n#  key=creds['aws_access_key_id'],\n#  secret=creds['aws_secret_access_key'],\n#  token=creds['aws_session_token'],\n#  client_kwargs={'region_name': 'us-west-2'},\n#)\n\n\n#with s3_fs.open(url, mode='rb') as f:\n#  ds = nc.Dataset('temporary_file.nc', memory=f.read(), diskless=True)\n#  sst_variable = ds.variables['sea_surface_temperature']\n#  sst_data = sst_variable[:]\n\n  # Plot the data\n#  for i in range(sst_data.shape[0]):\n#    plt.plot(sst_data[i])\n#    plt.savefig(plot_file_name)\n",
  "history_output" : "comes till here\n",
  "history_begin_time" : 1686607471943,
  "history_end_time" : 1686607487332,
  "history_notes" : null,
  "history_process" : "u09gh6",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "dfnaOXKTVD60",
  "history_input" : "import sys\nfrom podaac_s3 import *\nimport warnings\n\nhome_dir = os.path.expanduser(\"~\")\nplot_file_name = os.path.join(home_dir, \"harmony_plot_1.png\")\n\nif os.path.isfile(plot_file_name):\n  os.remove(plot_file_name)\n\nharmony_client = Client()\nrequest = Request(\n  collection=Collection(id=short_name),\n  spatial=BBox(-97.77667, 21.20806, -83.05197, 30.16605),\n  temporal={\n    'start': dt.datetime(2021, 8, 20),\n    'stop': dt.datetime(2021, 8, 21),\n  },\n)\n#job_id = harmony_client.submit(request)\n#harmony_client.wait_for_processing(job_id, show_progress=False)\n#data = harmony_client.result_json(job_id)\n#results = harmony_client.result_urls(job_id, link_type=LinkType.s3)\n#urls = list(results)\n#filename = '20210820033500-JPL-L2P_GHRSST-SSTskin-MODIS_T-N-v02.0-fv01.0_subsetted.nc4'\n\n#url = [url for url in urls if filename in url][0]\n#creds = harmony_client.aws_credentials()\n#s3_fs = s3fs.S3FileSystem(\n#  key=creds['aws_access_key_id'],\n#  secret=creds['aws_secret_access_key'],\n#  token=creds['aws_session_token'],\n#  client_kwargs={'region_name': 'us-west-2'},\n#)\n\n\n#with s3_fs.open(url, mode='rb') as f:\n#  ds = nc.Dataset('temporary_file.nc', memory=f.read(), diskless=True)\n#  sst_variable = ds.variables['sea_surface_temperature']\n#  sst_data = sst_variable[:]\n\n  # Plot the data\n#  for i in range(sst_data.shape[0]):\n#    plt.plot(sst_data[i])\n#    plt.savefig(plot_file_name)\n",
  "history_output" : "comes till here\n",
  "history_begin_time" : 1686607433404,
  "history_end_time" : 1686607450906,
  "history_notes" : null,
  "history_process" : "u09gh6",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "s5yIlsJsZaTv",
  "history_input" : "import sys\nfrom podaac_s3 import *\nimport warnings\n\nhome_dir = os.path.expanduser(\"~\")\nplot_file_name = os.path.join(home_dir, \"harmony_plot_1.png\")\n\nif os.path.isfile(plot_file_name):\n  os.remove(plot_file_name)\n\nharmony_client = Client()\nrequest = Request(\n  collection=Collection(id=short_name),\n  spatial=BBox(-97.77667, 21.20806, -83.05197, 30.16605),\n  temporal={\n    'start': dt.datetime(2021, 8, 20),\n    'stop': dt.datetime(2021, 8, 21),\n  },\n)\njob_id = harmony_client.submit(request)\nharmony_client.wait_for_processing(job_id, show_progress=False)\ndata = harmony_client.result_json(job_id)\nresults = harmony_client.result_urls(job_id, link_type=LinkType.s3)\nurls = list(results)\nfilename = '20210820033500-JPL-L2P_GHRSST-SSTskin-MODIS_T-N-v02.0-fv01.0_subsetted.nc4'\n\nurl = [url for url in urls if filename in url][0]\ncreds = harmony_client.aws_credentials()\ns3_fs = s3fs.S3FileSystem(\n  key=creds['aws_access_key_id'],\n  secret=creds['aws_secret_access_key'],\n  token=creds['aws_session_token'],\n  client_kwargs={'region_name': 'us-west-2'},\n)\n\n\n#with s3_fs.open(url, mode='rb') as f:\n#  ds = nc.Dataset('temporary_file.nc', memory=f.read(), diskless=True)\n#  sst_variable = ds.variables['sea_surface_temperature']\n#  sst_data = sst_variable[:]\n\n  # Plot the data\n#  for i in range(sst_data.shape[0]):\n#    plt.plot(sst_data[i])\n#    plt.savefig(plot_file_name)\n",
  "history_output" : "comes till here\n",
  "history_begin_time" : 1686607360459,
  "history_end_time" : 1686607413833,
  "history_notes" : null,
  "history_process" : "u09gh6",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "qqEgA4T1GK0Y",
  "history_input" : "import sys\nfrom podaac_s3 import *\nimport warnings\nimport netCDF4 as nc\n\nhome_dir = os.path.expanduser(\"~\")\nplot_file_name = os.path.join(home_dir, \"harmony_plot_1.png\")\n\nif os.path.isfile(plot_file_name):\n  os.remove(plot_file_name)\n\nharmony_client = Client()\nrequest = Request(\n  collection=Collection(id=short_name),\n  spatial=BBox(-97.77667, 21.20806, -83.05197, 30.16605),\n  temporal={\n    'start': dt.datetime(2021, 8, 20),\n    'stop': dt.datetime(2021, 8, 21),\n  },\n)\njob_id = harmony_client.submit(request)\nharmony_client.wait_for_processing(job_id, show_progress=False)\ndata = harmony_client.result_json(job_id)\nresults = harmony_client.result_urls(job_id, link_type=LinkType.s3)\nurls = list(results)\nfilename = '20210820033500-JPL-L2P_GHRSST-SSTskin-MODIS_T-N-v02.0-fv01.0_subsetted.nc4'\n\nurl = [url for url in urls if filename in url][0]\ncreds = harmony_client.aws_credentials()\ns3_fs = s3fs.S3FileSystem(\n  key=creds['aws_access_key_id'],\n  secret=creds['aws_secret_access_key'],\n  token=creds['aws_session_token'],\n  client_kwargs={'region_name': 'us-west-2'},\n)\n\n\n#with s3_fs.open(url, mode='rb') as f:\n#  ds = nc.Dataset('temporary_file.nc', memory=f.read(), diskless=True)\n#  sst_variable = ds.variables['sea_surface_temperature']\n#  sst_data = sst_variable[:]\n\n  # Plot the data\n#  for i in range(sst_data.shape[0]):\n#    plt.plot(sst_data[i])\n#    plt.savefig(plot_file_name)\n",
  "history_output" : "comes till here\n",
  "history_begin_time" : 1686607158383,
  "history_end_time" : 1686607200593,
  "history_notes" : null,
  "history_process" : "u09gh6",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "jq28zqsdcd7",
  "history_input" : "import sys\nfrom podaac_s3 import *\nimport warnings\nimport netCDF4 as nc\n\nhome_dir = os.path.expanduser(\"~\")\nplot_file_name = os.path.join(home_dir, \"harmony_plot_1.png\")\n\nif os.path.isfile(plot_file_name):\n  os.remove(plot_file_name)\n\nharmony_client = Client()\nrequest = Request(\n  collection=Collection(id=short_name),\n  spatial=BBox(-97.77667, 21.20806, -83.05197, 30.16605),\n  temporal={\n    'start': dt.datetime(2021, 8, 20),\n    'stop': dt.datetime(2021, 8, 21),\n  },\n)\njob_id = harmony_client.submit(request)\nharmony_client.wait_for_processing(job_id, show_progress=True)\ndata = harmony_client.result_json(job_id)\nresults = harmony_client.result_urls(job_id, link_type=LinkType.s3)\nurls = list(results)\nfilename = '20210820033500-JPL-L2P_GHRSST-SSTskin-MODIS_T-N-v02.0-fv01.0_subsetted.nc4'\n\nurl = [url for url in urls if filename in url][0]\ncreds = harmony_client.aws_credentials()\ns3_fs = s3fs.S3FileSystem(\n  key=creds['aws_access_key_id'],\n  secret=creds['aws_secret_access_key'],\n  token=creds['aws_session_token'],\n  client_kwargs={'region_name': 'us-west-2'},\n)\n\n\n#with s3_fs.open(url, mode='rb') as f:\n#  ds = nc.Dataset('temporary_file.nc', memory=f.read(), diskless=True)\n#  sst_variable = ds.variables['sea_surface_temperature']\n#  sst_data = sst_variable[:]\n\n  # Plot the data\n#  for i in range(sst_data.shape[0]):\n#    plt.plot(sst_data[i])\n#    plt.savefig(plot_file_name)\n",
  "history_output" : " [ Processing:   0% ] |                                                   | [/]comes till here\n [ Processing:   0% ] |                                                   | [-]\n [ Processing:   0% ] |                                                   | [\\]\n [ Processing:   0% ] |                                                   | [|]\n [ Processing:   0% ] |                                                   | [/]\n [ Processing:   0% ] |                                                   | [-]\n [ Processing:   0% ] |                                                   | [\\]\n [ Processing:   0% ] |                                                   | [|]\n [ Processing:   0% ] |                                                   | [/]\n [ Processing:   0% ] |                                                   | [-]\n [ Processing:   0% ] |                                                   | [\\]\n [ Processing:   0% ] |                                                   | [|]\n [ Processing:   0% ] |                                                   | [/]\n [ Processing:   0% ] |                                                   | [-]\n [ Processing:   0% ] |                                                   | [\\]\n [ Processing:   0% ] |                                                   | [|]\n [ Processing:   0% ] |                                                   | [/]\n [ Processing:   0% ] |                                                   | [-]\n [ Processing:  33% ] |################                                   | [\\]\n [ Processing:  33% ] |################                                   | [|]\n [ Processing:  33% ] |################                                   | [/]\n [ Processing:  33% ] |################                                   | [-]\n [ Processing:  33% ] |################                                   | [\\]\n [ Processing:  33% ] |################                                   | [|]\n [ Processing:  33% ] |################                                   | [/]\n [ Processing:  33% ] |################                                   | [-]\n [ Processing:  33% ] |################                                   | [\\]\n [ Processing: 100% ] |###################################################| [|]\n [ Processing: 100% ] |###################################################| [|]\n",
  "history_begin_time" : 1686607053872,
  "history_end_time" : 1686607089658,
  "history_notes" : null,
  "history_process" : "u09gh6",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "6k5mrtyvov1",
  "history_input" : "import sys\nfrom podaac_s3 import *\nimport warnings\nimport netCDF4 as nc\n\nhome_dir = os.path.expanduser(\"~\")\nplot_file_name = os.path.join(home_dir, \"harmony_plot_1.png\")\n\nif os.path.isfile(plot_file_name):\n  os.remove(plot_file_name)\n\nwarnings.filterwarnings(\"ignore\", category=UserWarning)  # Ignore specific warning category\n\nharmony_client = Client()\nrequest = Request(\n  collection=Collection(id=short_name),\n  spatial=BBox(-97.77667, 21.20806, -83.05197, 30.16605),\n  temporal={\n    'start': dt.datetime(2021, 8, 20),\n    'stop': dt.datetime(2021, 8, 21),\n  },\n)\njob_id = harmony_client.submit(request)\nharmony_client.wait_for_processing(job_id, show_progress=True)\ndata = harmony_client.result_json(job_id)\nresults = harmony_client.result_urls(job_id, link_type=LinkType.s3)\nurls = list(results)\nfilename = '20210820033500-JPL-L2P_GHRSST-SSTskin-MODIS_T-N-v02.0-fv01.0_subsetted.nc4'\n\nurl = [url for url in urls if filename in url][0]\ncreds = harmony_client.aws_credentials()\ns3_fs = s3fs.S3FileSystem(\n  key=creds['aws_access_key_id'],\n  secret=creds['aws_secret_access_key'],\n  token=creds['aws_session_token'],\n  client_kwargs={'region_name': 'us-west-2'},\n)\n\n\n#with s3_fs.open(url, mode='rb') as f:\n#  ds = nc.Dataset('temporary_file.nc', memory=f.read(), diskless=True)\n#  sst_variable = ds.variables['sea_surface_temperature']\n#  sst_data = sst_variable[:]\n\n  # Plot the data\n#  for i in range(sst_data.shape[0]):\n#    plt.plot(sst_data[i])\n#    plt.savefig(plot_file_name)\n",
  "history_output" : " [ Processing:   0% ] |                                                   | [/]comes till here\n [ Processing:   0% ] |                                                   | [-]\n [ Processing:   0% ] |                                                   | [\\]\n [ Processing:   0% ] |                                                   | [|]\n [ Processing:   0% ] |                                                   | [/]\n [ Processing:   0% ] |                                                   | [-]\n [ Processing:   0% ] |                                                   | [\\]\n [ Processing:   0% ] |                                                   | [|]\n [ Processing:   0% ] |                                                   | [/]\n [ Processing:   0% ] |                                                   | [-]\n [ Processing:   0% ] |                                                   | [\\]\n [ Processing:   0% ] |                                                   | [|]\n [ Processing:   0% ] |                                                   | [/]\n [ Processing:   0% ] |                                                   | [-]\n [ Processing:   0% ] |                                                   | [\\]\n [ Processing:   0% ] |                                                   | [|]\n [ Processing:   0% ] |                                                   | [/]\n [ Processing:   0% ] |                                                   | [-]\n [ Processing:  16% ] |########                                           | [\\]\n [ Processing:  16% ] |########                                           | [|]\n [ Processing:  16% ] |########                                           | [/]\n [ Processing:  16% ] |########                                           | [-]\n [ Processing:  16% ] |########                                           | [\\]\n [ Processing:  16% ] |########                                           | [|]\n [ Processing:  16% ] |########                                           | [/]\n [ Processing:  16% ] |########                                           | [-]\n [ Processing:  16% ] |########                                           | [\\]\n [ Processing: 100% ] |###################################################| [|]\n [ Processing: 100% ] |###################################################| [|]\n",
  "history_begin_time" : 1686606968628,
  "history_end_time" : 1686607006359,
  "history_notes" : null,
  "history_process" : "u09gh6",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "70a30so4ri3",
  "history_input" : "import sys\nfrom podaac_s3 import *\nimport warnings\nimport netCDF4 as nc\n\nhome_dir = os.path.expanduser(\"~\")\nplot_file_name = os.path.join(home_dir, \"harmony_plot_1.png\")\n\nif os.path.isfile(plot_file_name):\n  os.remove(plot_file_name)\n\nwarnings.filterwarnings(\"ignore\", category=UserWarning)  # Ignore specific warning category\n\nharmony_client = Client()\nrequest = Request(\n  collection=Collection(id=short_name),\n  spatial=BBox(-97.77667, 21.20806, -83.05197, 30.16605),\n  temporal={\n    'start': dt.datetime(2021, 8, 20),\n    'stop': dt.datetime(2021, 8, 21),\n  },\n)\njob_id = harmony_client.submit(request)\nharmony_client.wait_for_processing(job_id, show_progress=True)\ndata = harmony_client.result_json(job_id)\nresults = harmony_client.result_urls(job_id, link_type=LinkType.s3)\nurls = list(results)\nfilename = '20210820033500-JPL-L2P_GHRSST-SSTskin-MODIS_T-N-v02.0-fv01.0_subsetted.nc4'\n\nurl = [url for url in urls if filename in url][0]\ncreds = harmony_client.aws_credentials()\ns3_fs = s3fs.S3FileSystem(\n  key=creds['aws_access_key_id'],\n  secret=creds['aws_secret_access_key'],\n  token=creds['aws_session_token'],\n  client_kwargs={'region_name': 'us-west-2'},\n)\n\n\nwith s3_fs.open(url, mode='rb') as f:\n  ds = nc.Dataset('temporary_file.nc', memory=f.read(), diskless=True)\n  sst_variable = ds.variables['sea_surface_temperature']\n  sst_data = sst_variable[:]\n\n  # Plot the data\n  for i in range(sst_data.shape[0]):\n    plt.plot(sst_data[i])\n\n    plt.savefig(plot_file_name)\n",
  "history_output" : " [ Processing:   0% ] |                                                   | [/]comes till here\n [ Processing:   0% ] |                                                   | [-]\n [ Processing:   0% ] |                                                   | [\\]\n [ Processing:   0% ] |                                                   | [|]\n [ Processing:   0% ] |                                                   | [/]\n [ Processing:   0% ] |                                                   | [-]\n [ Processing:   0% ] |                                                   | [\\]\n [ Processing:   0% ] |                                                   | [|]\n [ Processing:   0% ] |                                                   | [/]\n [ Processing:   0% ] |                                                   | [-]\n [ Processing:   0% ] |                                                   | [\\]\n [ Processing:   0% ] |                                                   | [|]\n [ Processing:   0% ] |                                                   | [/]\n [ Processing:   0% ] |                                                   | [-]\n [ Processing:   0% ] |                                                   | [\\]\n [ Processing:   0% ] |                                                   | [|]\n [ Processing:   0% ] |                                                   | [/]\n [ Processing:   0% ] |                                                   | [-]\n [ Processing:   0% ] |                                                   | [\\]\n [ Processing:   0% ] |                                                   | [|]\n [ Processing:   0% ] |                                                   | [/]\n [ Processing:   0% ] |                                                   | [-]\n [ Processing:   0% ] |                                                   | [\\]\n [ Processing:   0% ] |                                                   | [|]\n [ Processing:   0% ] |                                                   | [/]\n [ Processing:   0% ] |                                                   | [-]\n [ Processing:   0% ] |                                                   | [\\]\n [ Processing: 100% ] |###################################################| [|]\n [ Processing: 100% ] |###################################################| [|]\n",
  "history_begin_time" : 1686606806853,
  "history_end_time" : 1686606848147,
  "history_notes" : null,
  "history_process" : "u09gh6",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "ar4hwzv0oo8",
  "history_input" : "import sys\nfrom podaac_s3 import *\nimport warnings\nimport netCDF4 as nc\n\nhome_dir = os.path.expanduser(\"~\")\nplot_file_name = os.path.join(home_dir, \"harmony_plot_1.png\")\n\nif os.path.isfile(plot_file_name):\n  os.remove(plot_file_name)\n\nwarnings.filterwarnings(\"ignore\", category=UserWarning)  # Ignore specific warning category\n\nharmony_client = Client()\nrequest = Request(\n  collection=Collection(id=short_name),\n  spatial=BBox(-97.77667, 21.20806, -83.05197, 30.16605),\n  temporal={\n    'start': dt.datetime(2021, 8, 20),\n    'stop': dt.datetime(2021, 8, 21),\n  },\n)\njob_id = harmony_client.submit(request)\nharmony_client.wait_for_processing(job_id, show_progress=True)\ndata = harmony_client.result_json(job_id)\nresults = harmony_client.result_urls(job_id, link_type=LinkType.s3)\nurls = list(results)\nfilename = '20210820033500-JPL-L2P_GHRSST-SSTskin-MODIS_T-N-v02.0-fv01.0_subsetted.nc4'\n\nurl = [url for url in urls if filename in url][0]\ncreds = harmony_client.aws_credentials()\ns3_fs = s3fs.S3FileSystem(\n  key=creds['aws_access_key_id'],\n  secret=creds['aws_secret_access_key'],\n  token=creds['aws_session_token'],\n  client_kwargs={'region_name': 'us-west-2'},\n)\n\ntry:\n  with s3_fs.open(url, mode='rb') as f:\n    ds = nc.Dataset('temporary_file.nc', memory=f.read(), diskless=True)\n    sst_variable = ds.variables['sea_surface_temperature']\n    sst_data = sst_variable[:]\n\n    # Plot the data\n    for i in range(sst_data.shape[0]):\n        plt.plot(sst_data[i])\n\n    plt.savefig(plot_file_name)\nexcept Exception as e:\n  print(e)\n",
  "history_output" : " [ Processing:   0% ] |                                                   | [/]comes till here\n [ Processing:   0% ] |                                                   | [-]\n [ Processing:   0% ] |                                                   | [\\]\n [ Processing:   0% ] |                                                   | [|]\n [ Processing:   0% ] |                                                   | [/]\n [ Processing:   0% ] |                                                   | [-]\n [ Processing:   0% ] |                                                   | [\\]\n [ Processing:   0% ] |                                                   | [|]\n [ Processing:   0% ] |                                                   | [/]\n [ Processing:   0% ] |                                                   | [-]\n [ Processing:   0% ] |                                                   | [\\]\n [ Processing:   0% ] |                                                   | [|]\n [ Processing:   0% ] |                                                   | [/]\n [ Processing:   0% ] |                                                   | [-]\n [ Processing:   0% ] |                                                   | [\\]\n [ Processing:   0% ] |                                                   | [|]\n [ Processing:   0% ] |                                                   | [/]\n [ Processing:   0% ] |                                                   | [-]\n [ Processing:   0% ] |                                                   | [\\]\n [ Processing:   0% ] |                                                   | [|]\n [ Processing:   0% ] |                                                   | [/]\n [ Processing:   0% ] |                                                   | [-]\n [ Processing:   0% ] |                                                   | [\\]\n [ Processing:   0% ] |                                                   | [|]\n [ Processing:   0% ] |                                                   | [/]\n [ Processing:   0% ] |                                                   | [-]\n [ Processing:   0% ] |                                                   | [\\]\n [ Processing:  16% ] |########                                           | [|]\n [ Processing:  16% ] |########                                           | [/]\n [ Processing:  16% ] |########                                           | [-]\n [ Processing:  16% ] |########                                           | [\\]\n [ Processing:  16% ] |########                                           | [|]\n [ Processing:  16% ] |########                                           | [/]\n [ Processing:  16% ] |########                                           | [-]\n [ Processing:  16% ] |########                                           | [\\]\n [ Processing:  16% ] |########                                           | [|]\n [ Processing:  33% ] |################                                   | [/]\n [ Processing:  33% ] |################                                   | [-]\n [ Processing:  33% ] |################                                   | [\\]\n [ Processing:  33% ] |################                                   | [|]\n [ Processing:  33% ] |################                                   | [/]\n [ Processing:  33% ] |################                                   | [-]\n [ Processing:  33% ] |################                                   | [\\]\n [ Processing:  33% ] |################                                   | [|]\n [ Processing:  33% ] |################                                   | [/]\n [ Processing:  33% ] |################                                   | [-]\n [ Processing:  33% ] |################                                   | [\\]\n [ Processing:  33% ] |################                                   | [|]\n [ Processing:  33% ] |################                                   | [/]\n [ Processing:  33% ] |################                                   | [-]\n [ Processing:  33% ] |################                                   | [\\]\n [ Processing:  33% ] |################                                   | [|]\n [ Processing:  33% ] |################                                   | [/]\n [ Processing:  33% ] |################                                   | [-]\n [ Processing:  50% ] |#########################                          | [\\]\n [ Processing:  50% ] |#########################                          | [|]\n [ Processing:  50% ] |#########################                          | [/]\n [ Processing:  50% ] |#########################                          | [-]\n [ Processing:  50% ] |#########################                          | [\\]\n [ Processing:  50% ] |#########################                          | [|]\n [ Processing:  50% ] |#########################                          | [/]\n [ Processing:  50% ] |#########################                          | [-]\n [ Processing:  50% ] |#########################                          | [\\]\n [ Processing:  66% ] |#################################                  | [|]\n [ Processing:  66% ] |#################################                  | [/]\n [ Processing:  66% ] |#################################                  | [-]\n [ Processing:  66% ] |#################################                  | [\\]\n [ Processing:  66% ] |#################################                  | [|]\n [ Processing:  66% ] |#################################                  | [/]\n [ Processing:  66% ] |#################################                  | [-]\n [ Processing:  66% ] |#################################                  | [\\]\n [ Processing:  66% ] |#################################                  | [|]\n [ Processing:  83% ] |##########################################         | [/]\n [ Processing:  83% ] |##########################################         | [-]\n [ Processing:  83% ] |##########################################         | [\\]\n [ Processing:  83% ] |##########################################         | [|]\n [ Processing:  83% ] |##########################################         | [/]\n [ Processing:  83% ] |##########################################         | [-]\n [ Processing:  83% ] |##########################################         | [\\]\n [ Processing:  83% ] |##########################################         | [|]\n [ Processing:  83% ] |##########################################         | [/]\n [ Processing: 100% ] |###################################################| [-]\n [ Processing: 100% ] |###################################################| [|]\n",
  "history_begin_time" : 1686606673029,
  "history_end_time" : 1686606753354,
  "history_notes" : null,
  "history_process" : "u09gh6",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "tb8wdzqauvo",
  "history_input" : "import sys\nfrom podaac_s3 import *\nimport warnings\nimport netCDF4 as nc\n\nhome_dir = os.path.expanduser(\"~\")\nplot_file_name = os.path.join(home_dir, \"harmony_plot_1.png\")\n\nif os.path.isfile(plot_file_name):\n  os.remove(plot_file_name)\n\nwarnings.filterwarnings(\"ignore\", category=UserWarning)  # Ignore specific warning category\n\nharmony_client = Client()\nrequest = Request(\n  collection=Collection(id=short_name),\n  spatial=BBox(-97.77667, 21.20806, -83.05197, 30.16605),\n  temporal={\n    'start': dt.datetime(2021, 8, 20),\n    'stop': dt.datetime(2021, 8, 21),\n  },\n)\njob_id = harmony_client.submit(request)\nharmony_client.wait_for_processing(job_id, show_progress=True)\ndata = harmony_client.result_json(job_id)\nresults = harmony_client.result_urls(job_id, link_type=LinkType.s3)\nurls = list(results)\nfilename = '20210820033500-JPL-L2P_GHRSST-SSTskin-MODIS_T-N-v02.0-fv01.0_subsetted.nc4'\n\nurl = [url for url in urls if filename in url][0]\ncreds = harmony_client.aws_credentials()\ns3_fs = s3fs.S3FileSystem(\n  key=creds['aws_access_key_id'],\n  secret=creds['aws_secret_access_key'],\n  token=creds['aws_session_token'],\n  client_kwargs={'region_name': 'us-west-2'},\n)\n\ntry:\n  with s3_fs.open(url, mode='rb') as f:\n    ds = nc.Dataset('temporary_file.nc', memory=f.read(), diskless=True)\n    sst_variable = ds.variables['sea_surface_temperature']\n    sst_data = sst_variable[:]\n\n    # Plot the data\n    for i in range(sst_data.shape[0]):\n        plt.plot(sst_data[i])\n\n    plt.savefig(plot_file_name)\nexcept Exception as e:\n  print(e)\n",
  "history_output" : " [ Processing:   0% ] |                                                   | [/]comes till here\n [ Processing:   0% ] |                                                   | [-]\n [ Processing:   0% ] |                                                   | [\\]\n [ Processing:   0% ] |                                                   | [|]\n [ Processing:   0% ] |                                                   | [/]\n [ Processing:   0% ] |                                                   | [-]\n [ Processing:   0% ] |                                                   | [\\]\n [ Processing:   0% ] |                                                   | [|]\n [ Processing:   0% ] |                                                   | [/]\n [ Processing:   0% ] |                                                   | [-]\n [ Processing:   0% ] |                                                   | [\\]\n [ Processing:   0% ] |                                                   | [|]\n [ Processing:   0% ] |                                                   | [/]\n [ Processing:   0% ] |                                                   | [-]\n [ Processing:   0% ] |                                                   | [\\]\n [ Processing:   0% ] |                                                   | [|]\n [ Processing:   0% ] |                                                   | [/]\n [ Processing:   0% ] |                                                   | [-]\n [ Processing:  16% ] |########                                           | [\\]\n [ Processing:  16% ] |########                                           | [|]\n [ Processing:  16% ] |########                                           | [/]\n [ Processing:  16% ] |########                                           | [-]\n [ Processing:  16% ] |########                                           | [\\]\n [ Processing:  16% ] |########                                           | [|]\n [ Processing:  16% ] |########                                           | [/]\n [ Processing:  16% ] |########                                           | [-]\n [ Processing:  16% ] |########                                           | [\\]\n [ Processing: 100% ] |###################################################| [|]\n [ Processing: 100% ] |###################################################| [|]\n",
  "history_begin_time" : 1686606297968,
  "history_end_time" : 1686606340445,
  "history_notes" : null,
  "history_process" : "u09gh6",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "4lwqg6mslqb",
  "history_input" : "import sys\nfrom podaac_s3 import *\nimport warnings\nimport netCDF4 as nc\n\nhome_dir = os.path.expanduser(\"~\")\nplot_file_name = os.path.join(home_dir, \"harmony_plot_1.png\")\n\nif os.path.isfile(plot_file_name):\n  os.remove(plot_file_name)\n\nwarnings.filterwarnings(\"ignore\", category=UserWarning)  # Ignore specific warning category\n\nharmony_client = Client()\nrequest = Request(\n  collection=Collection(id=short_name),\n  spatial=BBox(-97.77667, 21.20806, -83.05197, 30.16605),\n  temporal={\n    'start': dt.datetime(2021, 8, 20),\n    'stop': dt.datetime(2021, 8, 21),\n  },\n)\njob_id = harmony_client.submit(request)\nharmony_client.wait_for_processing(job_id, show_progress=True)\ndata = harmony_client.result_json(job_id)\nresults = harmony_client.result_urls(job_id, link_type=LinkType.s3)\nurls = list(results)\nfilename = '20210820033500-JPL-L2P_GHRSST-SSTskin-MODIS_T-N-v02.0-fv01.0_subsetted.nc4'\n\nurl = [url for url in urls if filename in url][0]\ncreds = harmony_client.aws_credentials()\ns3_fs = s3fs.S3FileSystem(\n  key=creds['aws_access_key_id'],\n  secret=creds['aws_secret_access_key'],\n  token=creds['aws_session_token'],\n  client_kwargs={'region_name': 'us-west-2'},\n)\n\ntry:\n  with s3_fs.open(url, mode='rb') as f:\n    ds = nc.Dataset('temporary_file.nc', memory=f.read(), diskless=True)\n    sst_variable = ds.variables['sea_surface_temperature']\n    sst_data = sst_variable[:]\n\n    # Plot the data\n    for i in range(sst_data.shape[0]):\n        plt.plot(sst_data[i])\n\n    plt.savefig(plot_file_name)\nexcept:\n  pass\n",
  "history_output" : " [ Processing:   0% ] |                                                   | [/]comes till here\n [ Processing:   0% ] |                                                   | [-]\n [ Processing:   0% ] |                                                   | [\\]\n [ Processing:   0% ] |                                                   | [|]\n [ Processing:   0% ] |                                                   | [/]\n [ Processing:   0% ] |                                                   | [-]\n [ Processing:   0% ] |                                                   | [\\]\n [ Processing:   0% ] |                                                   | [|]\n [ Processing:   0% ] |                                                   | [/]\n [ Processing:   0% ] |                                                   | [-]\n [ Processing:   0% ] |                                                   | [\\]\n [ Processing:   0% ] |                                                   | [|]\n [ Processing:   0% ] |                                                   | [/]\n [ Processing:   0% ] |                                                   | [-]\n [ Processing:   0% ] |                                                   | [\\]\n [ Processing:   0% ] |                                                   | [|]\n [ Processing:   0% ] |                                                   | [/]\n [ Processing:   0% ] |                                                   | [-]\n [ Processing:   0% ] |                                                   | [\\]\n [ Processing:   0% ] |                                                   | [|]\n [ Processing:   0% ] |                                                   | [/]\n [ Processing:   0% ] |                                                   | [-]\n [ Processing:   0% ] |                                                   | [\\]\n [ Processing:   0% ] |                                                   | [|]\n [ Processing:   0% ] |                                                   | [/]\n [ Processing:   0% ] |                                                   | [-]\n [ Processing:   0% ] |                                                   | [\\]\n [ Processing:   0% ] |                                                   | [|]\n [ Processing:   0% ] |                                                   | [/]\n [ Processing:   0% ] |                                                   | [-]\n [ Processing:   0% ] |                                                   | [\\]\n [ Processing:   0% ] |                                                   | [|]\n [ Processing:   0% ] |                                                   | [/]\n [ Processing:   0% ] |                                                   | [-]\n [ Processing:   0% ] |                                                   | [\\]\n [ Processing:   0% ] |                                                   | [|]\n [ Processing:  16% ] |########                                           | [/]\n [ Processing:  16% ] |########                                           | [-]\n [ Processing:  16% ] |########                                           | [\\]\n [ Processing:  16% ] |########                                           | [|]\n [ Processing:  16% ] |########                                           | [/]\n [ Processing:  16% ] |########                                           | [-]\n [ Processing:  16% ] |########                                           | [\\]\n [ Processing:  16% ] |########                                           | [|]\n [ Processing:  16% ] |########                                           | [/]\n [ Processing:  16% ] |########                                           | [-]\n [ Processing:  16% ] |########                                           | [\\]\n [ Processing:  16% ] |########                                           | [|]\n [ Processing:  16% ] |########                                           | [/]\n [ Processing:  16% ] |########                                           | [-]\n [ Processing:  16% ] |########                                           | [\\]\n [ Processing:  16% ] |########                                           | [|]\n [ Processing:  16% ] |########                                           | [/]\n [ Processing:  16% ] |########                                           | [-]\n [ Processing:  33% ] |################                                   | [\\]\n [ Processing:  33% ] |################                                   | [|]\n [ Processing:  33% ] |################                                   | [/]\n [ Processing:  33% ] |################                                   | [-]\n [ Processing:  33% ] |################                                   | [\\]\n [ Processing:  33% ] |################                                   | [|]\n [ Processing:  33% ] |################                                   | [/]\n [ Processing:  33% ] |################                                   | [-]\n [ Processing:  33% ] |################                                   | [\\]\n [ Processing:  33% ] |################                                   | [|]\n [ Processing:  33% ] |################                                   | [/]\n [ Processing:  33% ] |################                                   | [-]\n [ Processing:  33% ] |################                                   | [\\]\n [ Processing:  33% ] |################                                   | [|]\n [ Processing:  33% ] |################                                   | [/]\n [ Processing:  33% ] |################                                   | [-]\n [ Processing:  33% ] |################                                   | [\\]\n [ Processing:  33% ] |################                                   | [|]\n [ Processing: 100% ] |###################################################| [/]\n [ Processing: 100% ] |###################################################| [|]\n",
  "history_begin_time" : 1686606124993,
  "history_end_time" : 1686606182365,
  "history_notes" : null,
  "history_process" : "u09gh6",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "wzxbg3hlmnz",
  "history_input" : "import sys\nfrom podaac_s3 import *\nimport warnings\nimport netCDF4 as nc\n\nhome_dir = os.path.expanduser(\"~\")\nplot_file_name = os.path.join(home_dir, \"harmony_plot_1.png\")\n\nif os.path.isfile(plot_file_name):\n  os.remove(plot_file_name)\n\nwarnings.filterwarnings(\"ignore\", category=UserWarning)  # Ignore specific warning category\n\nharmony_client = Client()\nrequest = Request(\n  collection=Collection(id=short_name),\n  spatial=BBox(-97.77667, 21.20806, -83.05197, 30.16605),\n  temporal={\n    'start': dt.datetime(2021, 8, 20),\n    'stop': dt.datetime(2021, 8, 21),\n  },\n)\njob_id = harmony_client.submit(request)\nharmony_client.wait_for_processing(job_id, show_progress=True)\ndata = harmony_client.result_json(job_id)\nresults = harmony_client.result_urls(job_id, link_type=LinkType.s3)\nurls = list(results)\nfilename = '20210820033500-JPL-L2P_GHRSST-SSTskin-MODIS_T-N-v02.0-fv01.0_subsetted.nc4'\n\nurl = [url for url in urls if filename in url][0]\ncreds = harmony_client.aws_credentials()\ns3_fs = s3fs.S3FileSystem(\n  key=creds['aws_access_key_id'],\n  secret=creds['aws_secret_access_key'],\n  token=creds['aws_session_token'],\n  client_kwargs={'region_name': 'us-west-2'},\n)\n\ntry:\n  with s3_fs.open(url, mode='rb') as f:\n    ds = nc.Dataset('temporary_file.nc', memory=f.read(), diskless=True)\n    sst_variable = ds.variables['sea_surface_temperature']\n    sst_data = sst_variable[:]\n\n    # Plot the data\n    for i in range(sst_data.shape[0]):\n        plt.plot(sst_data[i])\n\n    plt.savefig(plot_file_name)\nexcept:\n  pass\n",
  "history_output" : " [ Processing:   0% ] |                                                   | [/]comes till here\n [ Processing:   0% ] |                                                   | [-]\n [ Processing:   0% ] |                                                   | [\\]\n [ Processing:   0% ] |                                                   | [|]\n [ Processing:   0% ] |                                                   | [/]\n [ Processing:   0% ] |                                                   | [-]\n [ Processing:   0% ] |                                                   | [\\]\n [ Processing:   0% ] |                                                   | [|]\n [ Processing:   0% ] |                                                   | [/]\n [ Processing:   0% ] |                                                   | [-]\n [ Processing:   0% ] |                                                   | [\\]\n [ Processing:   0% ] |                                                   | [|]\n [ Processing:   0% ] |                                                   | [/]\n [ Processing:   0% ] |                                                   | [-]\n [ Processing:   0% ] |                                                   | [\\]\n [ Processing:   0% ] |                                                   | [|]\n [ Processing:   0% ] |                                                   | [/]\n [ Processing:   0% ] |                                                   | [-]\n [ Processing:   0% ] |                                                   | [\\]\n [ Processing:   0% ] |                                                   | [|]\n [ Processing:   0% ] |                                                   | [/]\n [ Processing:   0% ] |                                                   | [-]\n [ Processing:   0% ] |                                                   | [\\]\n [ Processing:   0% ] |                                                   | [|]\n [ Processing:   0% ] |                                                   | [/]\n [ Processing:   0% ] |                                                   | [-]\n [ Processing:   0% ] |                                                   | [\\]\n [ Processing:  16% ] |########                                           | [|]\n [ Processing:  16% ] |########                                           | [/]\n [ Processing:  16% ] |########                                           | [-]\n [ Processing:  16% ] |########                                           | [\\]\n [ Processing:  16% ] |########                                           | [|]\n [ Processing:  16% ] |########                                           | [/]\n [ Processing:  16% ] |########                                           | [-]\n [ Processing:  16% ] |########                                           | [\\]\n [ Processing:  16% ] |########                                           | [|]\n [ Processing:  16% ] |########                                           | [/]\n [ Processing:  16% ] |########                                           | [-]\n [ Processing:  16% ] |########                                           | [\\]\n [ Processing:  16% ] |########                                           | [|]\n [ Processing:  16% ] |########                                           | [/]\n [ Processing:  16% ] |########                                           | [-]\n [ Processing:  16% ] |########                                           | [\\]\n [ Processing:  16% ] |########                                           | [|]\n [ Processing:  16% ] |########                                           | [/]\n [ Processing:  33% ] |################                                   | [-]\n [ Processing:  33% ] |################                                   | [\\]\n [ Processing:  33% ] |################                                   | [|]\n [ Processing:  33% ] |################                                   | [/]\n [ Processing:  33% ] |################                                   | [-]\n [ Processing:  33% ] |################                                   | [\\]\n [ Processing:  33% ] |################                                   | [|]\n [ Processing:  33% ] |################                                   | [/]\n [ Processing:  33% ] |################                                   | [-]\n [ Processing:  83% ] |##########################################         | [\\]\n [ Processing:  83% ] |##########################################         | [|]\n [ Processing:  83% ] |##########################################         | [/]\n [ Processing:  83% ] |##########################################         | [-]\n [ Processing:  83% ] |##########################################         | [\\]\n [ Processing:  83% ] |##########################################         | [|]\n [ Processing:  83% ] |##########################################         | [/]\n [ Processing:  83% ] |##########################################         | [-]\n [ Processing:  83% ] |##########################################         | [\\]\n [ Processing: 100% ] |###################################################| [|]\n [ Processing: 100% ] |###################################################| [|]\n",
  "history_begin_time" : 1686605752398,
  "history_end_time" : 1686605808319,
  "history_notes" : null,
  "history_process" : "u09gh6",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "39zrgcceus6",
  "history_input" : "import sys\nfrom podaac_s3 import *\nimport warnings\nimport netCDF4 as nc\n\nwarnings.filterwarnings(\"ignore\", category=UserWarning)  # Ignore specific warning category\n\nharmony_client = Client()\nrequest = Request(\n  collection=Collection(id=short_name),\n  spatial=BBox(-97.77667, 21.20806, -83.05197, 30.16605),\n  temporal={\n    'start': dt.datetime(2021, 8, 20),\n    'stop': dt.datetime(2021, 8, 21),\n  },\n)\njob_id = harmony_client.submit(request)\nharmony_client.wait_for_processing(job_id, show_progress=True)\ndata = harmony_client.result_json(job_id)\nresults = harmony_client.result_urls(job_id, link_type=LinkType.s3)\nurls = list(results)\nfilename = '20210820033500-JPL-L2P_GHRSST-SSTskin-MODIS_T-N-v02.0-fv01.0_subsetted.nc4'\n\nurl = [url for url in urls if filename in url][0]\ncreds = harmony_client.aws_credentials()\ns3_fs = s3fs.S3FileSystem(\n  key=creds['aws_access_key_id'],\n  secret=creds['aws_secret_access_key'],\n  token=creds['aws_session_token'],\n  client_kwargs={'region_name': 'us-west-2'},\n)\n\ntry:\n  with s3_fs.open(url, mode='rb') as f:\n    ds = nc.Dataset('temporary_file.nc', memory=f.read(), diskless=True)\n    sst_variable = ds.variables['sea_surface_temperature']\n    sst_data = sst_variable[:]\n\n    # Plot the data\n    for i in range(sst_data.shape[0]):\n        plt.plot(sst_data[i])\n\n    plt.show()\nexcept:\n  pass\n",
  "history_output" : " [ Processing:   0% ] |                                                   | [/]comes till here\n [ Processing:   0% ] |                                                   | [-]\n [ Processing:   0% ] |                                                   | [\\]\n [ Processing:   0% ] |                                                   | [|]\n [ Processing:   0% ] |                                                   | [/]\n [ Processing:   0% ] |                                                   | [-]\n [ Processing:   0% ] |                                                   | [\\]\n [ Processing:   0% ] |                                                   | [|]\n [ Processing:   0% ] |                                                   | [/]\n [ Processing:   0% ] |                                                   | [-]\n [ Processing:   0% ] |                                                   | [\\]\n [ Processing:   0% ] |                                                   | [|]\n [ Processing:   0% ] |                                                   | [/]\n [ Processing:   0% ] |                                                   | [-]\n [ Processing:   0% ] |                                                   | [\\]\n [ Processing:   0% ] |                                                   | [|]\n [ Processing:   0% ] |                                                   | [/]\n [ Processing:   0% ] |                                                   | [-]\n [ Processing:   0% ] |                                                   | [\\]\n [ Processing:   0% ] |                                                   | [|]\n [ Processing:   0% ] |                                                   | [/]\n [ Processing:   0% ] |                                                   | [-]\n [ Processing:   0% ] |                                                   | [\\]\n [ Processing:   0% ] |                                                   | [|]\n [ Processing:   0% ] |                                                   | [/]\n [ Processing:   0% ] |                                                   | [-]\n [ Processing:   0% ] |                                                   | [\\]\n [ Processing: 100% ] |###################################################| [|]\n [ Processing: 100% ] |###################################################| [|]\nFigure(640x480)\n",
  "history_begin_time" : 1686605630036,
  "history_end_time" : 1686605675880,
  "history_notes" : null,
  "history_process" : "u09gh6",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "c1afzn2apu8",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1686608251837,
  "history_notes" : null,
  "history_process" : "u09gh6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "guvyz9ejg0o",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1686608274450,
  "history_notes" : null,
  "history_process" : "u09gh6",
  "host_id" : "100001",
  "indicator" : "Stopped"
},]
